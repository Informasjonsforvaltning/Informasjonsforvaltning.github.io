[{"uri":"/felles-datakatalog/begrepskatalog/bakgrunn-hvorfor-begrepskatalog/","title":"Bakgrunn - hvorfor begrepskatalog","tags":[],"description":"","content":"Det er stadig økende forventinger fra politikere, innbyggere og næringslivet om mer deling av data. For at forvaltningen skal kunne levere kunnskap i form av data på en forsvarlig, sikker og samtidig enkel måte, må vi være i stand til å beskrive hva vi har. Data kan beskrives i form av en datakatalog (se Felles datakatalog), men dataene har også en betydning, som kan endre seg avhengig av hvilken kontekst de brukes i.\nDet er derfor en forutsetning at vi beskriver, og gjør tilgjengelig betydningen av informasjonen vi har lagret i registre, saksbehandlingssystemer og i forvaltningspraksis, slik at offentlig sektor kan dele denne kunnskapen og samtidig tilrettelegge for gjenbruk av den på tvers av tjenestene som inngår sitt samfunnsoppdrag.\nFlere og flere virksomheter jobber nå systematisk med begrepsarbeid, og de siste årene har det også blitt lagt ned betydelig arbeid i felles standarder for å beskrive begreper og å tilgjengeliggjøre disse. Med standarder på plass på definisjons og begrepsanalyseområdet, blir det enda lettere å dele virksomhetens fortolkning av informasjonen den forvalter. Et neste skritt på veien mot \u0026ldquo;kun én gang\u0026rdquo; er at virksomhetene deler sine begreper i én felles begrepskatalog.\n"},{"uri":"/felles-datakatalog/bakgrunn-f%C3%B8ringer-effekter/","title":"Bakgrunn, føringer og effekter","tags":[],"description":"","content":"Felles offentlig informasjonsforvaltning Beslutninger i offentlig sektor tas på grunnlag av informasjon innhentet fra brukere, tredjeparter og fra andre offentlige virksomheter. Med god dokumentering av hvilken informasjon den enkelte offentlige virksomhet forvalter og åpne APIer som gir tilgang til selve dataene, kan andelen som brukerne selv rapporterer inn gradvis reduseres.\nTiltak over flere trinn Tiltakene innen informasjonsforvaltning plasserers ofte i følgende \u0026ldquo;ambisjonstrapp\u0026rdquo; hentet fra Difis sider om informasjonsforvaltning:\nTilrettelegge - \u0026ldquo;Orden i eget hus\u0026rdquo; Skaffe oversikt over den informasjon som virksomhetene forvalter = beskrive denne på en enhetlig måte gjennom begrepsarbeid og gode definisjoner, samt vise sammenhenger gjennom informasjonsmodeller. Synliggjøre beskrivelsene for andre i form av datasett som blir publisert i en felles datakatalog. Herunder beskrivelser av kvalitet, opprinnelse/kontekst, lovgrunnlag, behandlinger og vedtak.\nTilgjengeliggjøre oversikten Beskrive hvordan data som er beskrevet i datasettene kan nås og anvendes – i en maskinlesbar og automatisert form – via en felles API-katalog. Også for data der tilgangen er begrenset (ikke åpne data), men som likevel kan nås dersom nærmere vilkår er oppfylt (hjemmel, registreringer, betalinger osv)\nAnvendelse - kun én gang (\u0026ldquo;Once only\u0026rdquo;) Etter hvert som oversiktene blir mer komplette og katalogene fylles opp av virksomhetene, vil det være grunnlag for mer automatisert gjenbruk og viderebruk av data, og mulig å nå målet om at informasjon bare skal innhentes én gang (deretter gjenbrukes).\nFøringer Digitaliseringsrundskrivet er en sammenstilling av pålegg og anbefalinger om digitalisering i offentlig sektor. Rundskrivet sier blant annet følgende: \u0026ldquo;Virksomheten skal registere datasett i Felles datakatalog (data.norge.no). Dette skal som et minimum gjøres når virksomheten endrer eller etablerer tjenester, herunder etablerer nye, eller oppgraderer eksisterende fagsystemer eller digitale tjenester.\u0026rdquo;\nEffekter Effektene av arbeidet med informasjonsforvaltning gjennom disse tiltakene vil blant annet være økt datakvalitet - felles definisjoner/forståelse og mere sanntidsdata. Dette vil igjen åpne for at rapporteringsplikter (skjema) kan reduseres i antall og omfang.\nVidere vil mer av rapporteringen kunne foregå med utgangspunkt i maskinelle og automatiserte løsninger (uttrekk og høsting av oppdaterte og riktige data basert på modeller). Herunder en bedre integrasjon mot andre eksisterende løsninger og muligheter for mer samhandling slik at rapporteringene rettes mot brukernes egne prosesser (brukerorientering).\nMed bedre beskrivelser og maskinlesbarhet vil det også ligge mer til rette for analyser av data og anvendelser innen kunstig intelligens (AI), noe som ytterligere styrker mulighetene for innovasjon. Både i form av mer bruk av sanntids informasjon og i form av sammensatte brukerorienterte tjenester.\nPå sikt kan det også føre til at noen rapporteringsplikter forsvinner fordi data fanges i det de oppstår og følger gjennom hele prosesser (sensorer – \u0026ldquo;tingenes internett\u0026rdquo;, transaksjoner – bestilling, kjøp/salg, fakturering, regnskap…)\nArbeidet med informasjonsforvaltning resulterer altså i et helt annet mulighetsrom når det gjelder anvendelse av data. Enten dette gjelder gjenbruk i rapporteringssammenheng eller innovasjon og nye forretningsområder. Det er gjort mange forsøk på å beskrive verdien av en slik effektiv bruk av data, f.eks. i USA (McKinsey) og EU, og dette beløper seg til mange milliarder. Uansett, det forutsetter at informasjonen er beskrevet og tilgjengeliggjort – i vårt tilfelle blant annet at de felles katalogene blir fylt med innhold.\n"},{"uri":"/developers_handbook/tools_and_software/container/","title":"Container","tags":[],"description":"","content":"Container Engine We recommend using Podman as your container engine. Podman is rootless by design, which makes it a more secure solution. Its daemonless design removes the single point of failure created by Docker\u0026rsquo;s central daemon.\nRead more about Podman\nInstallation (Podman Desktop) brew install podman Setup Podman container engine On macOS and Windows, running the Podman container engine requires running a Linux virtual machine.\nBy default, Podman Desktop initializes a Podman machine with a standard configuration.\nConsider creating a custom Podman machine to:\nControl the assigned resources: CPUs, memory, and disk size. Use a custom boot image. Use the rootful connection by default, for example to run Kind. (On Windows) Route the traffic through the network connection from your Windows session. Prerequisites​\nThe Podman executable is installed. Procedure​\nGo to Settings \u0026gt; Resources. In the Podman tile, click Create new. In the Create a Podman machine screen: Name: Enter a name, such as podman-machine-default. CPU(s): Select the number of CPUs. Memory: Select the memory size. Disk size: Select the disk size. Image path (Optional): Select a bootable image containing a virtual machine with Podman. Machine with root privileges: Enable to use the rootful connection by default. Required to use Kind on Windows. (On Windows) User mode networking (traffic relayed by a user process): - Enable to route the traffic through the network connection from your - Windows session. Required to access resources behind your VPN connection. Click Create Docker compose Docker compose has more features than Podman compose and therefor the recommended tool for running compose files.\nInstall docker compose by executing the following:\nbrew install docker-compose Podman compose will now using /opt/homebrew/bin/docker-compose instead.\nLinking Docker Some test frameworks call the docker command. Becaus To resolve this we have to make a static link to the podman command. Find the path to your podman binary:\nwhich podman and then replace the below with your path and run the command:\nsudo ln -s \u0026lt;path-to-your-podman-binary\u0026gt; /usr/local/bin/docker "},{"uri":"/developers_handbook/code_quality/coverage/","title":"Coverage","tags":[],"description":"","content":"Test coverage numbers are not the goal in itself. What is important to monitor is whether or not a pull request increases or decreases coverage. In most all cases a pull request should maintain or increase coverage. In extreme cases (e.g. when fixing a critical bug), it might be necessary to temporarily sacrifice coverage.\n"},{"uri":"/felles-datakatalog/","title":"Felles datakatalog","tags":[],"description":"","content":" Felles datakatalog (FDK) er en løsning som gir oversikt over datasett, begreper, API, informasjonsmodeller, tjenester og hendelser (og sammenhenger mellom disse) i offentlig sektor.\nI menyen til venstre kan du finne informasjon om de ulike katalogene. Hvor finner jeg felles datakatalog? Her finner du Felles datakatalog: https://data.norge.no\nHvordan kan jeg teste felles datakatalog? Her finner du vårt demo miljø: https://demo.fellesdatakatalog.digdir.no\nHer finner du registreringsløsningene i demo miljøet: https://registrering.demo.fellesdatakatalog.digdir.no\nFor å få demo-bruker kan du ta kontakt på mail: fellesdatakatalog@digdir.no\nHar dere statistikk på bruk? Ja, se her for statistikk over innhold og bruk av felles datakatalog.\nHva er planer for løsningen videre? Ved å følge vår åpne behovsprosess vil du finne ut alt om våre neste leveranser. Se Behovsprosessen.\n"},{"uri":"/developers_handbook/code_organization/frontend/","title":"Front-end","tags":[],"description":"","content":"For our front-end (GUI) services implemented in React , a typical folder structure should be\u0026hellip;\n"},{"uri":"/developers_handbook/microservices/","title":"Microservices","tags":[],"description":"","content":"We base our understanding of what a microservice is on the following definitions:\nMicroservices are small, autonomous services that work together.\nServices are out-of-process components who communicate with a mechanism such as a web service request, or remote procedure call.\nA component is a unit of software that is independently replaceable and upgradeable.\nReferences Sam Newman, Building Microservices\nMartin Fowler, Microservices\n"},{"uri":"/felles-datakatalog/overordnet-arkitektur/n%C3%A5situasjon/","title":"Nåsituasjon","tags":[],"description":"","content":"Her følger en kort oversikt over den overordnede arkitekturen til våre komponenter.\nDiagram Sammenhengen mellom komponentene illustreres i følgende diagram: Om komponentene i nåsituasjon I dag har vi delt de ulike komponentene inn i en løsning for søk i kataloger, en løsning for registrering, en løsning for innhøsting (harvester). I tillegg har vi en intern komponent for referanse-data.\nSøkeløsningen search: Vår portal for søk på tvers av alle katalogene search-api: Eksternt api med oppslag mot datasettkatalogen. api-cat: Eksternt api med oppslag mot api-katakogen. concept-cat: Eksternt api med oppslag mot begreps-katalogen. Registreringsløsningen registration-react: Vårt brukergrensesnitt for å registrere og legge inn innhold i kataloger registration-api: backend-komponent for Registreringsløsningen registration-auth: komponent som håndterer innlogging via IDPorten Høsteløsningen Høsteløsningen laster ned datakataloger og gjør dem søkbare. Består av\nharvester harvester-api Modellene Archi-modellen: https://github.com/Informasjonsforvaltning/SA_Informasjonsforvaltning_BASELINE Html-versjon: https://informasjonsforvaltning.github.io/SA_Informasjonsforvaltning_BASELINE/ "},{"uri":"/developers_handbook/monitoring/probes/","title":"Probes","tags":[],"description":"","content":"Probes should not require authorization.\nAny http response code greater than or equal to 200 and less than 400 indicates success. Any other code indicates failure.\nReadiness A containers\u0026rsquo;s readiness probe is used to check whether the service is ready to accept connections.\nExample:\nreadinessProbe: httpGet: path: /readyz port: 8080 initialDelaySeconds: 3 periodSeconds: 30 successThreshold: 1 failureThreshold: 3 We should check if the runtime dependencies that the service absolutely need to function, is ready. If the service depends on a database, it should check if the database is ready.\nLiveness A containers\u0026rsquo;s liveness probe is used to check whether the service has gone into a broken state and should be restarted.\nExample:\nlivenessProbe: httpGet: path: /livez port: 8080 initialDelaySeconds: 5 periodSeconds: 30 successThreshold: 1 failureThreshold: 5 An implementation (in java/kotlin) would be simply\n@RequestMapping(value = [\u0026#34;/ping\u0026#34;], method = [GET]) fun ping(): ResponseEntity\u0026lt;Void\u0026gt; = ResponseEntity.ok().build() References The following is a nice intro for Spring Boot: https://www.baeldung.com/spring-boot-kubernetes-self-healing-apps\nKubernetes configuration: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\nExample with authorization: https://www.critiqus.com/post/kubernetes-health/\n"},{"uri":"/felles-datakatalog/harvesting/rdf-parse/","title":"RDF parsing","tags":[],"description":"","content":"RDF parsing consists of three components:\nRDF Parser Parser Library written in Python Repository: fdk-rdf-parser\nRDF Parser Service JSON API service responsible for parsing RDF (turtle) to JSON using RDF Parser. Repository: fdk-rdf-parser-service\nRDF Parse Event Publisher Kafka consumer/producer consuming events of type reasoned and producing RDF Parse Events using RDF Parser Service. Repository: fdk-rdf-parse-event-publisher\n"},{"uri":"/felles-datakatalog/s%C3%B8k_og_filter/s%C3%B8k/","title":"Søk","tags":[],"description":"","content":"TBD\nFelter som blir indeksert med vekter Felt Vekt Kommentar Tittel "},{"uri":"/felles-datakatalog/informasjonsmodell-katalog/standarder/","title":"Standarder","tags":[],"description":"","content":"Informasjonsmodell-katatalogen representerer modeller på to måter:\nStruktur Dette er en fritekstlig representasjon av modellen med navn på elementet og elementets type.\nJSON Schema Dette er en representasjon av modellen i form av JSON Schema. Vi støtter pr i dag draft-06 av spesifikasjonen. For eksempel slik:\n{ \u0026#34;$schema\u0026#34;: \u0026#34;http://json-schema.org/draft-06/schema#\u0026#34;, \u0026#34;$id\u0026#34;: \u0026#34;https://fellesdatakatalog.digdir.no/informationmodels/c207ad40-cf59-47e6-b7a8-35d6c4692067/schema\u0026#34;, \u0026#34;definitions\u0026#34;: { \u0026#34;QueryResponse\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;object\u0026#34;, \u0026#34;properties\u0026#34;: { \u0026#34;aggregations\u0026#34;: { \u0026#34;$ref\u0026#34;: \u0026#34;#/definitions/Aggregation\u0026#34; }, \u0026#34;hits\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;array\u0026#34;, \u0026#34;items\u0026#34;: { \u0026#34;$ref\u0026#34;: \u0026#34;#/definitions/ConceptDocument\u0026#34; } }, \u0026#34;total\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;integer\u0026#34;, \u0026#34;format\u0026#34;: \u0026#34;int64\u0026#34; } } }, \u0026#34;Aggregation\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;object\u0026#34; }, \u0026#34;ConceptDocument\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;object\u0026#34; }, \u0026#34;ErrorMessage\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;object\u0026#34; } } } "},{"uri":"/felles-datakatalog/api-katalog/styringsdokumenter/","title":"Styringsdokumentasjon API katalog","tags":[],"description":"","content":"Her finner du styringsdokumentene i felles API-katalog utviklet av Digitaliseringsdirektoratet.\nStyringsdokument [Behovsbeskrivelse](Vedlegg 1 - Behovsbeskrivelse - Behov (4.3) for felles API-oversikt.pdf) "},{"uri":"/behovsprosessen/","title":"Åpen behovsprosess","tags":[],"description":"","content":"Vår behovsprosess er implementert som et GitHub-prosjekt og er åpent tilgjengelig. Behovsprosessen starter ved at det er registrert et issue på en av våre løsninger eller på vårt dedikerte behovsprosjekt.\nDersom du ønsker å registrere et behov eller en brukerhistorie mot en av våre løsninger, kan du opprette et nytt issue ved å opprette en brukerhistorie.\nBehovsprosessen har følgende steg:\nAvklare behov Kriteria: Issuet skal vere identifisert som et potensielt behov.\nAktiviterer:\nAnsvarlig rolle Aktivitet Verktøy Gevinstansvarlig Opprette epos og utarbeide enkel gevinstanalyse GitHub Funksjonell arkitekt Opprette brukerhistorier GitHub Analysere behov Kriteria: Behovet skal vere formulert som et epos og ha en enkel gevinstanalyse. Brukerhistorien skal tildeles forretningsverdi etter følgende kriteria:\nIndikator Kriterium Kritisk Eposet kan ikke leveres uten denne brukerhistorien. Viktig Brukerhistorien er vesentlig for at funksjonaliteten i Eposet realiseres. Mindre viktig Eposets funksjonelle intensjon er realisert uten denne brukerhistorien. Kjekt-å-ha Når alt annet er levert og teamet ikke har noe bedre å finne på, kan denne realiseres. Aktiviteter:\nAnsvarlig rolle Aktivitet Verktøy Funksjonell arkitekt Detaljere epos og brukerhistorier som operasjonaliserer eposet GitHub Løsningsarkitekt Dokumentere relevante kvalitetskrav Interaksjonsdesigner Lage trådskisser der dette er relevant Beskrive design og løsningsarkitektur Kriteria: Eposet skal ha ei eller flere brukerhistorier knytta til seg.\nAktiviteter:\nAnsvarlig rolle Aktivitet Verktøy Løsningsarkitekt Utarbeide løsningsarkitektur Archi Designer Utarbeide design basert på trådskisser Testleder Utarbeide akseptansekriteria som features i Gherkin GitHub Senior utvikler Utarbeide scenarier i features GitHub Klar til konstruksjon Kritieria: Brukerhistorien skal ha et design (der det er relevant) og en løsningsarkitektur. Akseptansekriteria skal være dokumentert som et sett av features.\nAktiviteter:\nAnsvarlig rolle Aktivitet Verktøy Produkteier Prioritere brukerhistorier GitHub Scrumleder Opprette brukerhistorien i utviklingsprosjekt GitHub Seniorutvikler Dele brukerhistorien opp i oppgaver GitHub I konstruksjon Kritieria: Brukerhistorien er prioritert og opprettet i utviklingsprosjekt.\nHer vil brukerhistorien bli duplisert over i det relevante utviklingsprosjektet, som oppretter sine brukerhistorier etter behov. Disse skal referere til den opprinnelige brukerhistorien i behovsprosjektet. Utviklingsteamet vil også legge brukerhistorien ut i sine prosjekter med tilhørende milepæler.\nKlar til akseptansetest Kriteria: Utviklingsteamet har levert funksjonalitet til staging-miljø som realiserer brukerhistorien.\nAktiviteter:\nAnsvarlig rolle Aktivitet Verktøy Funksjonell arkitekt Godkjenne levert funksjonalitet Løsningsarkitekt Godkjenne levert kvalitet Produkteier Akseptere levert funksjonalitet Utført Kriteria: Funksjonalitet og kvalitet er godkjent i akseptansetest og issue er \u0026ldquo;closed\u0026rdquo;. Eller det er bestemt at behovet ikke skal taes videre i behovsprosessen. Alle issues som blir lukka vil automatisk havne i denne kolonnen.\n"},{"uri":"/felles-datakatalog/api-katalog/api/","title":"API","tags":[],"description":"","content":"Her følger en kort beskrivelse API-katalogens API, samt eksempel på bruk med curl.\nDetaljer Server: https://fellesdatakatalog.digdir.no Tilbyr: application/json Oppføring i API-katalogen https://data.norge.no/dataservices/b9cf5ca7-7acf-3fd9-b7ff-4167adb84a83 Eksempel på spørringer Alle API-er:\ncurl -H \u0026#34;Accept: application/json\u0026#34; \u0026#34;https://fellesdatakatalog.digdir.no/api/apis\u0026#34; Et spesifikt API basert på id:\ncurl -H \u0026#34;Accept: application/json\u0026#34; \u0026#34;https://fellesdatakatalog.digdir.no/api/apis/\u0026lt;id\u0026gt;\u0026#34; En enkelt søk etter API-er med ordet \u0026ldquo;barnehage\u0026rdquo;:\ncurl -H \u0026#34;Accept: application/json\u0026#34; \u0026#34;https://fellesdatakatalog.digdir.no/api/apis?q=barnehage\u0026#34; Liste alle API-er der utgiver er Registerenheten i Brønnøysund:\ncurl -H \u0026#34;Accept: application/json\u0026#34; \u0026#34;https://fellesdatakatalog.digdir.no/api/apis?orgPath=/STAT/912660680/974760673\u0026#34; Liste endepunkter til alle API-er som realiserer en gitt tjenestetype. Merk: \u0026ldquo;environment\u0026rdquo; er obligatorisk og må enten vere \u0026ldquo;test\u0026rdquo; eller \u0026ldquo;production\u0026rdquo;\ncurl -H \u0026#34;Accept: application/json\u0026#34; \u0026#34;https://fellesdatakatalog.digdir.no/api/apis/endpoints?serviceType=Kontoopplysninger\u0026amp;environment=production\u0026#34; Liste endepunkter til alle API-er som realiserer en gitt tjenestetype for gitte organisasjonsnummer:\ncurl -H \u0026#34;Accept: application/json\u0026#34; \u0026#34;https://fellesdatakatalog.digdir.no/api/apis/endpoints?serviceType=Kontoopplysninger\u0026amp;orgNos=984851006,837884942\u0026amp;environment=production\u0026#34; "},{"uri":"/felles-datakatalog/datasett-katalog/api/","title":"API","tags":[],"description":"","content":"Her følger en kort beskrivelse datasett-katalogens API, samt eksempel på bruk med curl.\nDetaljer Server: https://fellesdatakatalog.digdir.no Tilbyr: application/json Oppføring i API-katalogen https://data.norge.no/dataservices/04c03d38-d856-3dea-9278-ae3de6b850fb Eksempel på spørringer Alle datasett:\ncurl -H \u0026#34;Accept: application/json\u0026#34; https://fellesdatakatalog.digdir.no/api/datasets Alle datasett med \u0026ldquo;paginering\u0026rdquo;, returnerer første side:\ncurl -H \u0026#34;Accept: application/json\u0026#34; \u0026#39;https://fellesdatakatalog.digdir.no/api/datasets?page=0\u0026#39; Et spesifikt datasett basert på id:\ncurl -H \u0026#34;Accept: application/json\u0026#34; https://fellesdatakatalog.digdir.no/api/datasets/\u0026lt;id\u0026gt; En enkelt søk etter datasett med ordet \u0026ldquo;barnehage\u0026rdquo;:\ncurl -H \u0026#34;Accept: application/json\u0026#34; https://fellesdatakatalog.digdir.no/api/datasets?q=barnehage "},{"uri":"/felles-datakatalog/informasjonsmodell-katalog/api/","title":"API","tags":[],"description":"","content":"Her følger en kort beskrivelse informasjonsmodell-katalogens API, samt eksempel på bruk med curl..\nDetaljer Server: https://fellesdatakatalog.digdir.no/api/informationmodels Tilbyr: application/json Oppføring i API-katalogen https://data.norge.no/dataservices/6efe3d09-44d8-3f15-b812-efad16cb7132 Eksempel på spørringer Alle informasjonsmodeller:\ncurl -H \u0026#34;Accept: application/json\u0026#34; https://fellesdatakatalog.digdir.no/api/informationmodels En spesifik informasjonsmodell basert på id:\ncurl -H \u0026#34;Accept: application/json\u0026#34; https://fellesdatakatalog.digdir.no/api/informationmodels/\u0026lt;id\u0026gt; En enkelt søk etter modeller med ordet \u0026ldquo;summert\u0026rdquo;:\ncurl -H \u0026#34;Accept: application/json\u0026#34; https://fellesdatakatalog.digdir.no/api/informationmodels?q=summert "},{"uri":"/developers_handbook/code_organization/backend/","title":"Back-end","tags":[],"description":"","content":"For our \u0026ldquo;back-end\u0026rdquo; services implemented in java/kotlin, a typical folder structure should be:\ntree -L 6 --dirsfirst -I \u0026#39;target\u0026#39; . ├── src │ ├── main │ │ ├── java │ │ │ └── no │ │ │ ├── brreg │ │ │ │ └── Generated.java │ │ │ └── template │ │ │ ├── model │ │ │ ├── spring │ │ │ └── Application.java │ │ ├── kotlin │ │ │ └── no │ │ │ └── template │ │ │ ├── controller │ │ │ ├── jena │ │ │ ├── mapping │ │ │ ├── repository │ │ │ └── service │ │ └── resources │ │ ├── openAPI │ │ │ └── openapi-generator-maven-plugin │ │ │ └── templates │ │ ├── specification │ │ │ └── template.yaml │ │ ├── application.properties │ │ ├── banner.txt │ │ └── gitBranchName.sh │ └── test │ ├── java │ │ └── no │ │ └── template │ │ ├── controller │ │ ├── integration │ │ ├── service │ │ └── TestResponseReader.java │ ├── kotlin │ │ └── no │ │ └── template │ │ └── TestData.kt │ └── resources │ ├── mockito-extensions │ │ └── org.mockito.plugins.MockMaker │ └── responses │ ├── example.ttl ├── buildCommands.sh ├── docker-compose.yml ├── Dockerfile ├── Jenkinsfile ├── pom.xml ├── README.md ├── TODO.md A reference implementation is here: https://github.com/Informasjonsforvaltning/a-back-end-service\n"},{"uri":"/developers_handbook/code_organization/","title":"Code organization","tags":[],"description":"","content":"We organize our code in a multi-repo way. That means that one microservice gets one git repository.\n"},{"uri":"/felles-datakatalog/s%C3%B8k_og_filter/filter/","title":"Filter","tags":[],"description":"","content":"TBD\n"},{"uri":"/developers_handbook/tools_and_software/frontend/","title":"Frontend","tags":[],"description":"","content":"Front-end tools Node.js\nWe use nvm to manage our node/npm versions. Yarn\nOur newer applications use Yarn, but older ones use npm to build and install the dependencies Node versions \u0026lt; 15 on mac To install node below 15 you need to do the following steps:\nOpen terminal in Rosetta2 mode: Go to Application -\u0026gt; Right click on terminal app -\u0026gt; Get Info -\u0026gt; Select \u0026ldquo;Open using Rosetta\u0026rdquo; -\u0026gt; Restart Terminal In Terminal, write -\u0026gt; arch -x86_64 zsh "},{"uri":"/felles-datakatalog/harvesting/harvesters/","title":"Harvesters","tags":[],"description":"","content":" fdk-concept-harvester fdk-dataservice-harvester fdk-dataset-harvester fdk-event-harvester fdk-informationmodel-harvester fdk-public-service-harvester The harvest process is triggered by messages from RabbitMQ with the routing key *.#.HarvestTrigger, where * is the relevant resource type, ie dataset, and # is an unused part of the key. The unused part of the key was in earlier versions used to supply the id of a publisher, this has since been moved to the message body, see “publisherId” in the next section.\nThe body of the trigger message has 3 relevant parameters:\ndataSourceId - Triggers the harvest of a specific source from fdk-harvest-admin publisherId - Triggers the harvest of all sources for the specified organization number. forceUpdate - Indicates that the harvest should be performed, even when no changes are detected in the source A triggered harvest will download all relevant sources from fdk-harvest-admin, download everything from the source and try to read it as a RDF graph via a jena Model. If the source is successfully parsed as a jena Model it will be compared to the last harvest of the same source. The harvest process will continue if the source is not isomorphic to the last harvest or forceUpdate is true.\nAll blank nodes will be skolemized in the resource graphs, which means that an URI is generated for the blank node.\nWhen all sources from the trigger has been processed a new rabbit message will be published with the routing key *.harvested, the message body will be a list of harvest reports, one report for each source from fdk-harvest-admin. Each report will contain these fields:\nid - the id for the source in fdk-harvest-admin url - the source url dataType - the relevant resource type harvestError - a boolean wich is set to true if the harvest failed startTime - the timestamp when the harvest started endTime - the timestamp when the harvest finished errorMessage - eventual error message if the harvest failed changedCatalogs - fdkId and uri for each catalog with changes changedResources - fdkId and uri for each resource with changes removedResources - fdkId and uri for each resource removed from the source Since subsequent part of the harvest process is dependent of kafka events, the services deployed from fdk-kafka-event-publisher will listen for harvest reports in rabbitMQ and produce kafka events for removed and changed resources.\n"},{"uri":"/felles-datakatalog/overordnet-arkitektur/m%C3%A5lbilde/","title":"Målbilde","tags":[],"description":"","content":"Vi jobber kontinuerlig med å oppdatere målbildet vårt etter hvert som behovene endrer seg. I hovedsak dreier endringene seg om å implementere støtte for nye typer kataloger.\nDiagram Sammenhengen mellom komponenten illustreres i følgende diagram: Om komponentene i målbildet Felles Datakatalog Portal: grafisk brukergrensesnitt der publikum har generell tilgang til oversikt over innhold som er publisert av hver enkelt virksomhet. Felles Datakatalog API: back-end komponenter som høster og lagrer fra ulike kilde-kataloger. Tilbyr API for å lese katalog-innhold. X-katalog: samling av kataloger som virksomheter har publisert. Disse komponentene tilbyr et maskin-til-maskin grensesnitt (API) mot de ulike katalogene. Understøtter høsting på standardiserte formater (feks DCAT-AP-NO, SKOS-AP-NO). X-katalog GUI: Et rollebasert brukergrensesnitt der virksomheten har tilgang til søk og oppslag i sin katalog. en x-katalog i virksomheten: lokale kataloger som er installert hos den enkelte virksomhet og vedlikeholdes og driftes av virksomheten. Understøtter høsting. Modellene Archi-modellen: https://github.com/Informasjonsforvaltning/SA_Informasjonsforvaltning Html-versjon: https://informasjonsforvaltning.github.io/SA_Informasjonsforvaltning/ "},{"uri":"/developers_handbook/monitoring/metrics/","title":"Metrics","tags":[],"description":"","content":"101 Prometheus is used to scrape /metric endpoints of applications running in the cluster. Metrics are numeric measurements, which when scraped over time become time series that describe how the given application is running.\nMetrics follow the following notation:\n\u0026lt;metric name\u0026gt;{\u0026lt;label name\u0026gt;=\u0026lt;label value\u0026gt;, ...} A gauge is a metric that represents a single numerical value that can arbitrarily go up and down. The following example gauge metric indicates that http://data.norge.no/ returns the http status code 200:\nprobe_http_status_code{ingress=\u0026#34;ingress-prod-v4\u0026#34;, instance=\u0026#34;http://data.norge.no/\u0026#34;, namespace=\u0026#34;prod\u0026#34;} 200 Another example is a counter metric, whose value may only increase or be reset to zero:\nprocessed_mail_requests{fdk_service=\u0026#34;fdk-mail-sender-service\u0026#34;, status=\u0026#34;success\u0026#34;} 7 One may based on metrics create rules that trigger alerts whenever an expression is true. E.g. the expression probe_http_status_code{} \u0026gt;= 500, which indicates than an application is unable to respond correctly.\nSee Prometheus Introduction and Metric Types for a more thorough introduction.\nMetric services Service Purpose https://prometheus.fellesdatakatalog.digdir.no/rules Alert rules overview https://karma.fellesdatakatalog.digdir.no Alerting dashboard https://thanos.fellesdatakatalog.digdir.no Explore and query metrics https://alertmanager.fellesdatakatalog.digdir.no See alerts and silence them https://grafana.fellesdatakatalog.digdir.no Dashboards based on metrics Create metrics endpoint and expose metrics See Metric and label naming for best practices.\nConfigure metrics scraping Use the following pod annotations to configure scraping of metrics:\nannotations: # Enable scraping of metrics. prometheus.io/scrape: \u0026#34;true\u0026#34; # Specifies metrics port. Default: container\u0026#39;s port. prometheus.io/port: \u0026#34;8080\u0026#34; # Specifies metrics path. Default: \u0026#34;/metrics\u0026#34;. prometheus.io/path: \u0026#34;/metrics\u0026#34; If you need more customization, such as scraping interval, look into using a servicemonitor or podmonitor instead.\nCreate alert rules See Alerting Rules for how to configure rules.\nAlerts fire in the #fdk-dev-alerts and #fdk-prod-alerts slack channels.\nPrometheusRule resources in the GitHub repo fdk-infra/infrastructure/base/alerts is used to configure alert rules, and will be automatically synced into Prometheus running in the clusters. Remember to add any new files within the alerts folder to the kustomization.yaml resources list.\n--- apiVersion: monitoring.coreos.com/v1 kind: PrometheusRule metadata: name: \u0026lt;rule name - kebab case\u0026gt; namespace: monitoring labels: release: monitoring-kube-prometheus-stack spec: groups: - name: fdk rules: - alert: \u0026lt;alert name - pascal case\u0026gt; annotations: description: \u0026lt;alert description (shown in slack)\u0026gt; summary: \u0026lt;alert title (shown in slack)\u0026gt; expr: \u0026lt;alert condition (e.g. \u0026#34;up{} == 0\u0026#34;)\u0026gt; for: \u0026lt;time to wait before alerting (e.g. \u0026#34;0s\u0026#34;)\u0026gt; labels: severity: \u0026lt;severity (none|info|warning|error|critical)\u0026gt; dashboard_url: \u0026lt;link to grafana/kibana dashboard, if any\u0026gt; "},{"uri":"/felles-datakatalog/overordnet-arkitektur/","title":"Overordnet arkitektur","tags":[],"description":"","content":"Her følger en kort oversikt over den overordnede arkitekturen til våre komponenter.\nTOGAF Vi følger en tilpasset versjon av TOGAFs ADM metodikk når vi jobber med arkitektur. Dette betyr at vi tar fram både baseline (Nåsituasjon) og target (Målbilde) modeller, og ut i fra disse utarbeider vi transisjoner og migrasjonsplaner. Transisjons-arkitekturer er å finne i målbildet.\nArchiMate Våre arkitekturmodeller er laget i henhold til Archimate-rammeverket med hjelp av verktøyet Archi. Kildekoden til modellene ligger åpent tilgjengelig for alle på våre Github-side. Hvordan vi har brukt Archi og en enkel oppskrift på hvordan ta dette i bruk vil du finne under de respektive arkitektur-modellene. Det finnes også en en html-versjon av modellene. Linken til disse vil du finne på sidene under.\nAPI-first Vi forsøker å utvikle våre komponenter etter “API”-first metodikken. Vi har derfor valgt å spesifisere våre API etter OpenAPI Specification v 3.\nÅpen kildekode Kildekoden til løsningen ligger åpent tilgjengelig på Github. All kildekode har en åpen lisens Apache License 2.0\n"},{"uri":"/felles-datakatalog/begrepskatalog/standarder/","title":"Standarder","tags":[],"description":"","content":"Her introduserer vi de standardene vi bruker i Felles begrepskatalog. Standardene som pekes til er forvaltet av Difi. Feltene i standarden bygger på innholdsstandarden \u0026ldquo;Forvaltningsstandard for begrepsbeskrivelser\u0026rdquo;.\nNår man skal tilgjengeliggjøre begreper kan SKOS eller TBX benyttes. På gjeldende tidspunkt støttes kun SKOS. Støtte for TBX vil komme. Utvekslingsstandardene og revidert \u0026ldquo;Forvaltningsstandard for begrepsbeskrivelser\u0026rdquo; blir gjeldende i hhv. versjon 1.0 og 2.0 fra januar 2019.\n"},{"uri":"/felles-datakatalog/begrepskatalog/api/","title":"API","tags":[],"description":"","content":"Her følger en kort beskrivelse begrepskatalogens API, samt eksempel på bruk med curl.\nDetaljer Server: https://fellesdatakatalog.digdir.no Tilbyr: application/json Oppføring i API-katalogen TBD Eksempel på spørringer Alle begrep:\ncurl -H \u0026#34;Accept: application/json\u0026#34; \u0026#34;https://fellesdatakatalog.digdir.no/api/concepts\u0026#34; Et spesifikt begrep basert på id:\ncurl -H \u0026#34;Accept: application/json\u0026#34; \u0026#34;https://fellesdatakatalog.digdir.no/api/concepts/\u0026lt;id\u0026gt;\u0026#34; Et enkelt søk etter begrep med ordet \u0026ldquo;innsyn\u0026rdquo;:\ncurl -H \u0026#34;Accept: application/json\u0026#34; \u0026#34;https://fellesdatakatalog.digdir.no/api/concepts?q=innsyn\u0026#34; En spørring som gir filter på organisasjonen (i eksempelet Brønnøysundregistrene) som har publisert begrepet:\ncurl -H \u0026#34;Accept: application/json\u0026#34; \u0026#34;https://fellesdatakatalog.digdir.no/api/concepts?orgPath=/STAT/912660680/974760673\u0026#34; Tilgang til registreringsløsningens samling av publiserte begreper som SKOS-AP-NO:\ncurl -H \u0026#34;Accept: text/turtle\u0026#34; https://registrering-begrep-api.fellesdatakatalog.digdir.no/collections Som over, men for ein gitt organisasjon (publisher):\ncurl -H \u0026#34;Accept: text/turtle\u0026#34; \u0026#34;https://registrering-begrep-api.fellesdatakatalog.digdir.no/collections?publisher=991825827\u0026#34; "},{"uri":"/felles-datakatalog/datasett-katalog/","title":"Datasett-katalog","tags":[],"description":"","content":"Felles Datasettkatalog er en løsning som gir oversikt over datasett i offentlig sektor, enten de er offentlige åpne data eller begrenset offentlighet. Katalogen adresserer behovet for å oppdage datasett, evaluere om datasettene kan benyttes i den aktuelle konteksten og tilgang til datasett gjennom API-er.\nHvor hentes datasettbeskrivelser fra? FDK høster beskrivelser fra andre datakataloger, herunder geonorge.no, data.norge.no og Statens Vegvesen sin katalog over åpne data. I tillegg tilbys en registreringsløsning.\nHar du en datakatalog som kan eksponeres og deles? Ta kontakt!\nHvordan registerer jeg mine datasett? Felles datasettkatalog inneholder en registreringsløsning som alle offentlige virksomheter kan benytte. Private virksomheter oppfordres til å ta kontakt for å registrere sine datasett.\nHvor finner jeg felles datasettkatalog? Her finner du Felles datasettkatalog: https://data.norge.no/datasets\n"},{"uri":"/developers_handbook/","title":"Developer&#39;s handbook","tags":[],"description":"","content":"The Developer\u0026rsquo;s handbook contains descriptions of our best practices developers will find useful when producing code in our projects. You will find few absolute rules, but you are strongly encouraged to follow practices described here.\n"},{"uri":"/felles-datakatalog/harvesting/harvest-admin/","title":"Harvest admin","tags":[],"description":"","content":"Backend fdk-harvest-admin\nFrontend fdk-admin-gui\nHarvest Admin is a service that provide functionality to register and list datasource endpoints to be harvested.\n"},{"uri":"/developers_handbook/tools_and_software/java_and_kotlin/","title":"Java and Kotlin","tags":[],"description":"","content":"Recommended Java Implementations: You can install the one of the versions listed below via SDKMAN or manually by following the installation guide on their website.\n\u0026ndash; Azul Zulu.\n\u0026ndash; Amazon Coretto\n\u0026ndash; Eclipse Temurin from Adoptium.\nSDKMAN You can easily install Java via SDKMAN. After installation you can use the command sdk list java to see available java versions. The version you use depends on your context, meaning which app you are trying to use it in. Therefore, always refer to the version mentioned in the README.md file of the repository. Other useful commands:\nList available Java implementations\nsdk list java Installing Java OpenJDK version\nsdk install java x.y.z-open Switching between different java versions\nsdk use java \u0026lt;version\u0026gt; Setting a default version\nsdk default java \u0026lt;version\u0026gt; Maven Maven can also be installed with SDKMAN or manually by following their installation guide: https://maven.apache.org/install.html\nInstalling maven with sdkman sdk install maven x.y.z Running a maven project: mvn clean install "},{"uri":"/developers_handbook/monitoring/logging/","title":"Logging","tags":[],"description":"","content":"Logs should preferably be in JSON.\n"},{"uri":"/developers_handbook/naming/","title":"Naming","tags":[],"description":"","content":"There are two hard things in Computer Science, and the following is an attempt to ease our pain when naming things.\nWhat Naming convention Example microservice functional description (+service) A backend service repository microservice name a-backend-service api specification microservice name.yaml a-backend-service.yaml groupId no.brreg.servicename no.brreg.abackendservice artifactId service-name a-backend-service package groupId.funtion no.brreg.abackendservice.api|controller|service|repository|model Api classes name-of-resource-in-api-spec+Api SomeResourceApi.java Model classes name-of-resource-in-api-spec+DB SomeResourceDB.java Controller classes name-of-resource-in-api-spec+ApiImpl.java SomeResourceApiImpl.java Service classes name-of-resource-in-api-spec +Service SomeResourceService.java Repository classes name-of-resource-in-api-spec +Repository SomeResourceRepository.java "},{"uri":"/felles-datakatalog/s%C3%B8k_og_filter/sparql/","title":"SPARQL","tags":[],"description":"","content":"data.norge.no har en SPARQL-tjeneste som kan brukes for å søke i datakatalogen.\nEndepunktet har følgende adresse: https://sparql.fellesdatakatalog.digdir.no/\nEt enkelt web-grensesnitt for å sende spørringer til endepunktet finner du her: https://data.norge.no/sparql\nEksempler på queries For å få oversikt over hvilke egenskaper som finnes:\nPREFIX dcat: \u0026lt;http://www.w3.org/ns/dcat#\u0026gt; SELECT * WHERE {​​​​​​ ?dataset a dcat:Dataset . ?dataset ?prop ?value. }​​​​​​ Deretter plukke og velge egenskaper:\nPREFIX dcat: \u0026lt;http://www.w3.org/ns/dcat#\u0026gt; PREFIX rdf: \u0026lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#\u0026gt; PREFIX purl: \u0026lt;http://purl.org/dc/terms/\u0026gt; SELECT * WHERE {​​​​​​​​​​​​​​ ?dataset a dcat:Dataset . ?dataset purl:title ?title. ?dataset rdf:type ?type. # Velg nye egenskaper ved: ?dataset \u0026lt;ønsket egenskap\u0026gt; ?egenskapsverdi }​​​​​​​​​​​​​​​​​​​​​ "},{"uri":"/felles-datakatalog/begrepskatalog/standarder/forvaltningsstandard-for-begrepsbeskrivelser/","title":"Standard for begrepsbeskrivelser","tags":[],"description":"","content":"Forvaltningsstandard for begrepsbeskrivelser Forvaltningsstandard for begrepsbeskrivelser følges og legger føringer for feltene i Felles begrepskatalog. Standarden skal sikre at dokumentasjon av begreper gjøres på en felles, strukturert måte. Den stiller krav til innhold i beskrivelse av begrep, det vil si hvilke elementer som skal være med i beskrivelsen.\nSe standarden her: https://www.difi.no/fagomrader-og-tjenester/digitalisering-og-samordning/standarder/referansekatalogen\n"},{"uri":"/felles-datakatalog/api-katalog/","title":"API-katalog","tags":[],"description":"","content":"Felles API-katalog ble utviklet i 2018 som en utvidelse av Felles datakatalog for å skape en oversikt over tilgang til data.\nHvor hentes API-beskrivelser fra? FDK høster beskrivelser fra andre API-kataloger. I tillegg tilbys en registreringsløsning.\nHvordan registerer jeg mine API? Felles datasettkatalog inneholder en registreringsløsning som alle offentlige virksomheter kan benytte. Private virksomheter oppfordres til å ta kontakt for å registrere sine API.\nHvor finner jeg felles API-katalog? Her finner du API-katalogen: https://data.norge.no/dataservices\n"},{"uri":"/developers_handbook/monitoring/grafana/","title":"Grafana","tags":[],"description":"","content":"The repo fdk-grafana-dashboards contains the dashboards that are deployed to FDK Grafana. See the projects readme for more info.\n"},{"uri":"/felles-datakatalog/begrepskatalog/bakgrunn-hvorfor-begrepskatalog/hva-skjer/","title":"Hva skjer?","tags":[],"description":"","content":"Hva har vi gjort? I høst har vi re-planlagt leveranser i API-arbeidet og gjort plass til leveranser på Felles begrepskatalog. 16. november leverte vi den første leveransen på Felles begrepskatalog, kalt \u0026ldquo;Etablere støtte for standarder\u0026rdquo;. Denne leveransen gjorde oss i stand til å støtte de standardene som Difi har utarbeidet på begrepsanalyse og definisjonsarbeid og her ble det gjort et arbeid på GUI – forbedring av eksisterende søkeresultatside, etablert en detaljside for enkeltbegrep, og noe på sammenligning av begreper. Det ble også laget en høsteløsning som kan høste begrep fra virksomhetens lokale kataloger (denne høstingen støtter i dag høsting av begrep som er mappet til SKOS-standarden (W3C), men støtte for TBX-standarden (ISO) vil også komme). For å kunne høste fra lokale begrepskataloger, må det også gjøres en jobb internt hos virksomhetene. Noen av virksomhetene som har jobbet lenge med begrepsarbeid har planer om å publisere begrepsbeskrivelser i Felles begrepskatalog (datakatalog) innen utgangen av 2018, andre har dette på blokka.\nFor å sikre involvering, orientere om utvikling og få tilbakemeldinger fra virksomhetene, har vi opprettet et innføringsteam for Felles begrepskatalog som møtes med jevne mellomrom. Deltakerne i denne gruppa er virksomheter som tidligere har vært involvert i standardiseringstiltakene til Difi og andre virksomheter som har deltatt i SKATE-tiltak. Blant disse kan nevnes NAV, SKD, Lånekassen, Arkivverket, Difi, UDI, Språkrådet, Kartverket og SSB.\nHva kommer? Støtte for TBX Mulighet for enkel registrering av begrep "},{"uri":"/felles-datakatalog/begrepskatalog/hvordan_publisere/","title":"Hvordan publisere begreper i begrepskatalogen","tags":[],"description":"","content":"Her følger en kort beskrivelse av hvordan man kan publisere begreper i Felles datakatalog.\nRegistrere begreper i Begrepskatalog GUI I registreringsløsningen vår kan du registrere begreper og velge å publisere de slik at informasjonen blir tilgjengelig i portalløsningen av Felles datakatalog https://data.norge.no.\nImportere Begreper Virksomheter som har utarbeidet en strukturert oversikt over noen av sine begreper, for eksempel i et regneark eller tabell, kan overføre disse til registreringsløsningen i Felles datakatalog gjennom import av en CSV- eller JSON fil.\nHvordan Importere begreper fra CSV format? For at importen til registreringsløsningen skal fungere må begrepene og beskrivelsene følge en struktur som er nærmere beskrevet i en mal. For å se malen, klikk på: [Lenke til mal].\nNoen av kolonnene, for eksempel tillatt_term har støtte for flere verdier. For å legge inn flere forekomster legger du til en ekstra kolonne med samme navn på første linje (overskrift) eller separerer forekomstene med |.\nEnkelte felter har også støtte for flere språk og målformer. Den nåværende importløsningen støtter norsk bokmål (nb), nynorsk (nn) og engelsk (en). Hvis språk og målform ikke er oppgitt vil denne automatisk bli satt til bokmål under importen.\nLegg til eller kopier inn termer og tilhørende informasjon ved å sette inn flere rader inntil listen du ønsker å importere til registreringsløsningen er komplett.\nEksempel I tabellen nedenfor er kolonne a og b formattert for norsk bokmål, og kolonne c og d for engelsk.\nanbefalt_term:nb tillatt_term:nb anbefalt_term:en tillatt_term:en frarådet_term:nb definisjon:nb test eksempel eksempeltest test example example test illustrasjonstest Dette er en definisjon på et eksempel Kolonner som ikke gjenkjennes under importen vil bli ignorert, så test gjerne med et par begreper først og kontroller at disse blir korrekt importert i registreringsløsningen. Selve rekkefølgen på kolonnene har ikke noe å si for importen av begreper.\nOm innholdet i feltene Felt Kommentar Eksempel anbefalt_term Flere språk og målformer, kun en kolonne pr språk og målform. tillatt_term Flere språk og målformer, ubegrenset antall kolonner pr målform (kan ha flere tillatte termer). Kan også legge til flere termer i samme kolonne ved å separere termene med | tillattTerm1|tillattTerm2|tillattTerm3 frarådet_term Flere språk og målformer, ubegrenset antall kolonner pr målform (kan ha flere frarådede termer). Kan også legge til flere termer i samme kolonne ved å separere termene med | frarådetTerm1|frarådetTerm2|frarådetTerm3 definisjon Flere språk og målformer, kun en kolonne pr språk og målform. definisjon:forhold_til_kilde må være en av: «egendefinert», «basertPaaKilde» eller «sitatFraKilde» definisjon:kilde Formateres med tekstbeskrivelse og gyldig uri til kilde separert med tegnet |. Ikke mulig å oppgi kilde hvis \u0026ldquo;forhold_til_kilde\u0026rdquo; er \u0026ldquo;egendefinert\u0026rdquo;. «Digitaliseringsdirektoratet|https://www.digdir.no/» definisjon_for_allmennheten Flere språk og målformer, kun en kolonne pr språk og målform. definisjon_for_allmennheten:forhold_til_kilde må være en av: «egendefinert», «basertPaaKilde» eller «sitatFraKilde» definisjon_for_allmennheten:kilde Formateres med tekstbeskrivelse og gyldig uri til kilde separert med tegnet |. Ikke mulig å oppgi kilde hvis \u0026ldquo;forhold_til_kilde\u0026rdquo; er \u0026ldquo;egendefinert\u0026rdquo;. definisjon_for_spesialister Flere språk og målformer, kun en kolonne pr språk og målform. definisjon_for_spesialister:forhold_til_kilde må være en av: «egendefinert», «basertPaaKilde» eller «sitatFraKilde» definisjon_for_spesialister:kilde Formateres med tekstbeskrivelse og gyldig uri til kilde separert med tegnet |. Ikke mulig å oppgi kilde hvis \u0026ldquo;forhold_til_kilde\u0026rdquo; er \u0026ldquo;egendefinert\u0026rdquo;. merknad Flere språk og målformer, kun en kolonne pr språk og målform. eksempel Flere språk og målformer, kun en kolonne pr språk og målform. fagområde Flere språk og målformer, kun en kolonne pr språk og målform. terminologi verdiområde:uri Kun en kolonne med gyldig uri. https://www.ssb.no/klass/klassifikasjoner/19 verdiområde:tekst Kun en kolonne med tekstbeskrivelse. Standard for sivilstand kontaktpunkt:epost Kun en kolonne. Rader må inneholde gyldig epostadresse. kontaktpunkt:telefon Kun en kolonne. gyldig_fom Fra og med dato for perioden hvor begrepet er gyldig. Kun en kolonne. Dato formattert med (åååå-mm-dd) år, måned, dag. 2020-01-31 gyldig_tom Til og med dato for perioden hvor begrepet er gyldig. Kun en kolonne. Dato formattert med (åååå-mm-dd) år, måned, dag. 2020-12-01 se_også NB! Dette feltet kan ikke brukes til eksterne referanser utenfor begrepskatalogen. Det anbefales sterkt å sette dette etter begrepet er registrert inn. Kun en kolonne støttes og rader må inneholde en gyldig uri som peker til eksisterende begrep i begrepskatalogen. versjon Versjonsnummer til begrepet. Består av tre siffer der første siffer er «major», andre siffer er «minor» og tredje er «patch». For at begrepet skal importeres må versjonsnummeret minimum være «minor», dvs. 0.1.0. 0.1.0 Du kan lese mer om beskrivelser av begrep her: Forvaltningsstandard for begrepsbeskrivelser (SKOS-AP-NO-Begrep)\nLagring Når du har fylt tabellen med innhold i henhold til malen (riktig formattering) må du huske å eksportere den som en CSV-fil med semikolon separering og UTF-8 koding.\nEksempel med utgangspunkt i Excel for Microsoft 365:\n1 - Trykk på \u0026lsquo;Export\u0026rsquo; 2 - Trykk på \u0026lsquo;Change File Type\u0026rsquo; 3 - Velg \u0026lsquo;CSV (comma delimited)\u0026rsquo; 4 - Trykk på \u0026lsquo;Save as\u0026rsquo; 5 - Velg \u0026lsquo;CSV UTF-8 (comma delimited)\u0026rsquo; under \u0026lsquo;Save as type\u0026rsquo; Du er nå klar for å importere CSV filen i registreringsløsningen.\nLogg deg inn på Registreringsløsningen og velg Begrepskatalogen. Vær oppmerksom på at du må ha rettigheten «Felles datakatalog - alle kataloger - virksomhetsadministrator i Altinn for å kunne importere.\nKlikk på «Importer begreper» og velg den csv- eller json-filen du har opprettet.\nEksempel på CSV-fil anbefalt_term:nb;tillatt_term:nb;anbefalt_term:en;tillatt_term:en;frarådet_term:nb;definisjon:nb test eksempel;eksempeltest;Test example;example test;illustrasjonstest;Dette er en definisjon på et eksempel Hvordan Importere begreper fra JSON format? Opprett en JSON fil med 1 eller flere begreper på formatet under:\n[ { \u0026#34;anbefaltTerm\u0026#34;: { \u0026#34;navn\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;anbefalt term på norsk bokmål\u0026#34;, \u0026#34;nn\u0026#34;: \u0026#34;tilrådd term på norsk nynorsk\u0026#34;, \u0026#34;en\u0026#34;:\u0026#34;recommended term in english\u0026#34; } }, \u0026#34;tillattTerm\u0026#34;: { \u0026#34;nb\u0026#34;: [ \u0026#34;tillatt term 1 på norsk bokmål\u0026#34;, \u0026#34;tillatt term 2 på norsk bokmål\u0026#34; ], \u0026#34;nn\u0026#34;: [ \u0026#34;tillaten term 1 på norsk nynorsk\u0026#34;, \u0026#34;tillaten term 2 på norsk nynorsk\u0026#34; ], \u0026#34;en\u0026#34;: [ \u0026#34;alternative term 1 in english\u0026#34;, \u0026#34;alternative term 2 in english\u0026#34; ] }, \u0026#34;frarådetTerm\u0026#34;: { \u0026#34;nb\u0026#34;: [ \u0026#34;frarådet term 1 på norsk bokmål\u0026#34;, \u0026#34;frarådet term 2 på norsk bokmål\u0026#34; ], \u0026#34;nn\u0026#34;: [ \u0026#34;frårådd term 1 på norsk nynorsk\u0026#34;, \u0026#34;frårådd term 2 på norsk nynorsk\u0026#34; ], \u0026#34;en\u0026#34;: [ \u0026#34;hidden term 1 in english\u0026#34;, \u0026#34;hidden term 2 in english\u0026#34; ] }, \u0026#34;definisjon\u0026#34;: { \u0026#34;tekst\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;definisjon på norsk bokmål\u0026#34;, \u0026#34;nn\u0026#34;: \u0026#34;definisjon på norsk nynorsk\u0026#34;, \u0026#34;en\u0026#34;: \u0026#34;definition in english\u0026#34; } }, \u0026#34;kildebeskrivelse\u0026#34;: { \u0026#34;forholdTilKilde\u0026#34;: \u0026#34;egendefinert\u0026#34;, \u0026#34;kilde\u0026#34;: [] }, \u0026#34;definisjonForAllmennheten\u0026#34;: { \u0026#34;tekst\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;definisjon for allmennheten på norsk bokmål\u0026#34;, \u0026#34;nn\u0026#34;: \u0026#34;definisjon for allmenta på norsk nynorsk\u0026#34;, \u0026#34;en\u0026#34;: \u0026#34;definition for public in english\u0026#34; }, \u0026#34;kildebeskrivelse\u0026#34;: { \u0026#34;forholdTilKilde\u0026#34;: \u0026#34;sitatFraKilde\u0026#34;, \u0026#34;kilde\u0026#34;: [ { \u0026#34;tekst\u0026#34;: \u0026#34;Tittel på kilde_allmennheten\u0026#34;, \u0026#34;uri\u0026#34;: \u0026#34;http://kildesitatallmennhetenuri.no/\u0026#34; } ] } }, \u0026#34;definisjonForSpesialister\u0026#34;: { \u0026#34;tekst\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;definisjon for spesialist på norsk bokmål\u0026#34;, \u0026#34;nn\u0026#34;: \u0026#34;definisjon for spesialist på norsk nynorsk\u0026#34;, \u0026#34;en\u0026#34;: \u0026#34;definition for specialist in english\u0026#34; }, \u0026#34;kildebeskrivelse\u0026#34;: { \u0026#34;forholdTilKilde\u0026#34;: \u0026#34;basertPaaKilde\u0026#34;, \u0026#34;kilde\u0026#34;: [ { \u0026#34;tekst\u0026#34;: \u0026#34;Tittel på kilde_spesialister\u0026#34;, \u0026#34;uri\u0026#34;: \u0026#34;http://kildebasertspesialisteruri.no/\u0026#34; } ] } }, \u0026#34;merkelapp\u0026#34;: [ \u0026#34;test-import-json\u0026#34; ], \u0026#34;gyldigFom\u0026#34;: \u0026#34;2023-11-20\u0026#34;, \u0026#34;gyldigTom\u0026#34;: \u0026#34;2024-11-25\u0026#34;, \u0026#34;seOgså\u0026#34;: [ \u0026#34;http://begrepskatalogen/begrep/20b2e299-9fe1-11e5-a9f8-e4115b280940\u0026#34;, \u0026#34;http://begrepskatalogen/begrep/20b2e299-9fe1-11e5-a9f8-e4115b280940\u0026#34; ], \u0026#34;erstattesAv\u0026#34;: [ \u0026#34;http://begrepskatalogen/begrep/20b2e284-9fe1-11e5-a9f8-e4115b280940\u0026#34; ], \u0026#34;abbreviatedLabel\u0026#34;: \u0026#34;forkortelse-av-begrepet\u0026#34;, \u0026#34;begrepsRelasjon\u0026#34;: [ { \u0026#34;relasjon\u0026#34;: \u0026#34;assosiativ\u0026#34;, \u0026#34;beskrivelse\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;beskrivelse på norsk bokmål\u0026#34;, \u0026#34;nn\u0026#34;: \u0026#34;skildring på norsk nynorsk\u0026#34;, \u0026#34;en\u0026#34;: \u0026#34;description in english\u0026#34; }, \u0026#34;relatertBegrep\u0026#34;: \u0026#34;http://begrepskatalogen/begrep/20b2e277-9fe1-11e5-a9f8-e4115b280940\u0026#34; }, { \u0026#34;relasjon\u0026#34;: \u0026#34;partitiv\u0026#34;, \u0026#34;relasjonsType\u0026#34;: \u0026#34;omfatter\u0026#34;, \u0026#34;inndelingskriterium\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;inndelingskriterium på norsk bokmål\u0026#34;, \u0026#34;nn\u0026#34;: \u0026#34;inndelingskriterium på norsk nynorsk\u0026#34;, \u0026#34;en\u0026#34;: \u0026#34;division criterion in english\u0026#34; }, \u0026#34;relatertBegrep\u0026#34;: \u0026#34;http://begrepskatalogen/begrep/20b2e277-9fe1-11e5-a9f8-e4115b280940\u0026#34; }, { \u0026#34;relasjon\u0026#34;: \u0026#34;partitiv\u0026#34;, \u0026#34;relasjonsType\u0026#34;: \u0026#34;erDelAv\u0026#34;, \u0026#34;inndelingskriterium\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;inndelingskriterium på norsk bokmål\u0026#34;, \u0026#34;nn\u0026#34;: \u0026#34;inndelingskriterium på norsk nynorsk\u0026#34;, \u0026#34;en\u0026#34;: \u0026#34;division criterion in english\u0026#34; }, \u0026#34;relatertBegrep\u0026#34;: \u0026#34;http://begrepskatalogen/begrep/20b2e277-9fe1-11e5-a9f8-e4115b280940\u0026#34; }, { \u0026#34;relasjon\u0026#34;: \u0026#34;generisk\u0026#34;, \u0026#34;relasjonsType\u0026#34;: \u0026#34;overordnet\u0026#34;, \u0026#34;inndelingskriterium\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;inndelingskriterium på norsk bokmål\u0026#34;, \u0026#34;nn\u0026#34;: \u0026#34;inndelingskriterium på norsk nynorsk\u0026#34;, \u0026#34;en\u0026#34;: \u0026#34;division criterion in english\u0026#34; }, \u0026#34;relatertBegrep\u0026#34;: \u0026#34;http://begrepskatalogen/begrep/20b2e277-9fe1-11e5-a9f8-e4115b280940\u0026#34; }, { \u0026#34;relasjon\u0026#34;: \u0026#34;generisk\u0026#34;, \u0026#34;relasjonsType\u0026#34;: \u0026#34;underordnet\u0026#34;, \u0026#34;inndelingskriterium\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;inndelingskriterium på norsk bokmål\u0026#34;, \u0026#34;nn\u0026#34;: \u0026#34;inndelingskriterium på norsk nynorsk\u0026#34;, \u0026#34;en\u0026#34;: \u0026#34;division criterion in english\u0026#34; }, \u0026#34;relatertBegrep\u0026#34;: \u0026#34;http://begrepskatalogen/begrep/20b2e277-9fe1-11e5-a9f8-e4115b280940\u0026#34; } ], \u0026#34;merknad\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;Tilleggsopplysninger om begrepets betydning som ikke hører hjemme i definisjonsfeltet på norsk bokmål\u0026#34;, \u0026#34;nn\u0026#34;: \u0026#34;Tilleggsopplysningar om betydninga av omgrepet som ikkje høyrer heime i definisjonsfeltet på nynorsk\u0026#34;, \u0026#34;en\u0026#34;: \u0026#34;Additional information about the term\u0026#39;s meaning that does not belong in the definition field in english \u0026#34; }, \u0026#34;eksempel\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;Eksempler på konkrete tilfeller av begrepet på norsk bokmål\u0026#34;, \u0026#34;nn\u0026#34;: \u0026#34;Døme på konkrete tilfelle av omgrepet på norsk nynorsk\u0026#34;, \u0026#34;en\u0026#34;: \u0026#34;Examples of concrete cases of the concept in english\u0026#34; }, \u0026#34;fagområdeKoder\u0026#34;: [ \u0026#34;78a472e6-46bd-42b3-a2ca-e0cae858314c\u0026#34; ], \u0026#34;fagområde\u0026#34;: { \u0026#34;nb\u0026#34;: [ \u0026#34;Spesialisert kunnskapsområde som begrepet tilhører på norsk bokmål\u0026#34; ], \u0026#34;nn\u0026#34;: [ \u0026#34;Spesialisert kunnskapsområde som omgrepet tilhøyrer på norsk nynorsk\u0026#34; ], \u0026#34;en\u0026#34;: [ \u0026#34;Specialized knowledge area to which the concept belongs in english\u0026#34; ] }, \u0026#34;omfang\u0026#34;: { \u0026#34;tekst\u0026#34;: \u0026#34;Tittel på verdiområde\u0026#34;, \u0026#34;uri\u0026#34;: \u0026#34;http://lenketilverdiomraade.no\u0026#34; }, \u0026#34;kontaktpunkt\u0026#34;: { \u0026#34;harEpost\u0026#34;: \u0026#34;e-post@epost.no\u0026#34;, \u0026#34;harTelefon\u0026#34;: \u0026#34;12345678\u0026#34; }, \u0026#34;statusURI\u0026#34;: \u0026#34;http://publications.europa.eu/resource/authority/concept-status/DRAFT\u0026#34;, \u0026#34;versjonsnr\u0026#34;: { \u0026#34;major\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;minor\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;patch\u0026#34;: \u0026#34;0\u0026#34; } }, { \u0026#34;anbefaltTerm\u0026#34;: { \u0026#34;navn\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;anbefalt term 2 på norsk bokmål\u0026#34;, \u0026#34;nn\u0026#34;: \u0026#34;tilrådd term 2 på norsk nynorsk\u0026#34;, \u0026#34;en\u0026#34;:\u0026#34;recommended term 2 in english\u0026#34; } }, \u0026#34;tillattTerm\u0026#34;: { \u0026#34;nb\u0026#34;: [ \u0026#34;tillatt term 1 på norsk bokmål\u0026#34;, \u0026#34;tillatt term 2 på norsk bokmål\u0026#34; ], \u0026#34;nn\u0026#34;: [ \u0026#34;tillaten term 1 på norsk nynorsk\u0026#34;, \u0026#34;tillaten term 2 på norsk nynorsk\u0026#34; ], \u0026#34;en\u0026#34;: [ \u0026#34;alternative term 1 in english\u0026#34;, \u0026#34;alternative term 2 in english\u0026#34; ] }, \u0026#34;frarådetTerm\u0026#34;: { \u0026#34;nb\u0026#34;: [ \u0026#34;frarådet term 1 på norsk bokmål\u0026#34;, \u0026#34;frarådet term 2 på norsk bokmål\u0026#34; ], \u0026#34;nn\u0026#34;: [ \u0026#34;frårådd term 1 på norsk nynorsk\u0026#34;, \u0026#34;frårådd term 2 på norsk nynorsk\u0026#34; ], \u0026#34;en\u0026#34;: [ \u0026#34;hidden term 1 in english\u0026#34;, \u0026#34;hidden term 2 in english\u0026#34; ] }, \u0026#34;definisjon\u0026#34;: { \u0026#34;tekst\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;definisjon på norsk bokmål\u0026#34;, \u0026#34;nn\u0026#34;: \u0026#34;definisjon på norsk nynorsk\u0026#34;, \u0026#34;en\u0026#34;: \u0026#34;definition in english\u0026#34; } }, \u0026#34;kildebeskrivelse\u0026#34;: { \u0026#34;forholdTilKilde\u0026#34;: \u0026#34;egendefinert\u0026#34;, \u0026#34;kilde\u0026#34;: [] }, \u0026#34;definisjonForAllmennheten\u0026#34;: { \u0026#34;tekst\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;definisjon for allmennheten på norsk bokmål\u0026#34;, \u0026#34;nn\u0026#34;: \u0026#34;definisjon for allmenta på norsk nynorsk\u0026#34;, \u0026#34;en\u0026#34;: \u0026#34;definition for public in english\u0026#34; }, \u0026#34;kildebeskrivelse\u0026#34;: { \u0026#34;forholdTilKilde\u0026#34;: \u0026#34;sitatFraKilde\u0026#34;, \u0026#34;kilde\u0026#34;: [ { \u0026#34;tekst\u0026#34;: \u0026#34;Tittel på kilde_allmennheten\u0026#34;, \u0026#34;uri\u0026#34;: \u0026#34;http://kildesitatallmennhetenuri.no/\u0026#34; } ] } }, \u0026#34;definisjonForSpesialister\u0026#34;: { \u0026#34;tekst\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;definisjon for spesialist på norsk bokmål\u0026#34;, \u0026#34;nn\u0026#34;: \u0026#34;definisjon for spesialist på norsk nynorsk\u0026#34;, \u0026#34;en\u0026#34;: \u0026#34;definition for specialist in english\u0026#34; }, \u0026#34;kildebeskrivelse\u0026#34;: { \u0026#34;forholdTilKilde\u0026#34;: \u0026#34;basertPaaKilde\u0026#34;, \u0026#34;kilde\u0026#34;: [ { \u0026#34;tekst\u0026#34;: \u0026#34;Tittel på kilde_spesialister\u0026#34;, \u0026#34;uri\u0026#34;: \u0026#34;http://kildebasertspesialisteruri.no/\u0026#34; } ] } }, \u0026#34;merkelapp\u0026#34;: [ \u0026#34;test-import-json\u0026#34; ], \u0026#34;gyldigFom\u0026#34;: \u0026#34;2023-11-20\u0026#34;, \u0026#34;gyldigTom\u0026#34;: \u0026#34;2024-11-25\u0026#34;, \u0026#34;seOgså\u0026#34;: [ \u0026#34;http://begrepskatalogen/begrep/20b2e299-9fe1-11e5-a9f8-e4115b280940\u0026#34;, \u0026#34;http://begrepskatalogen/begrep/20b2e299-9fe1-11e5-a9f8-e4115b280940\u0026#34; ], \u0026#34;erstattesAv\u0026#34;: [ \u0026#34;http://begrepskatalogen/begrep/20b2e284-9fe1-11e5-a9f8-e4115b280940\u0026#34; ], \u0026#34;abbreviatedLabel\u0026#34;: \u0026#34;forkortelse-av-begrepet\u0026#34;, \u0026#34;begrepsRelasjon\u0026#34;: [ { \u0026#34;relasjon\u0026#34;: \u0026#34;assosiativ\u0026#34;, \u0026#34;beskrivelse\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;beskrivelse på norsk bokmål\u0026#34;, \u0026#34;nn\u0026#34;: \u0026#34;skildring på norsk nynorsk\u0026#34;, \u0026#34;en\u0026#34;: \u0026#34;description in english\u0026#34; }, \u0026#34;relatertBegrep\u0026#34;: \u0026#34;http://begrepskatalogen/begrep/20b2e277-9fe1-11e5-a9f8-e4115b280940\u0026#34; }, { \u0026#34;relasjon\u0026#34;: \u0026#34;partitiv\u0026#34;, \u0026#34;relasjonsType\u0026#34;: \u0026#34;omfatter\u0026#34;, \u0026#34;inndelingskriterium\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;inndelingskriterium på norsk bokmål\u0026#34;, \u0026#34;nn\u0026#34;: \u0026#34;inndelingskriterium på norsk nynorsk\u0026#34;, \u0026#34;en\u0026#34;: \u0026#34;division criterion in english\u0026#34; }, \u0026#34;relatertBegrep\u0026#34;: \u0026#34;http://begrepskatalogen/begrep/20b2e277-9fe1-11e5-a9f8-e4115b280940\u0026#34; }, { \u0026#34;relasjon\u0026#34;: \u0026#34;partitiv\u0026#34;, \u0026#34;relasjonsType\u0026#34;: \u0026#34;erDelAv\u0026#34;, \u0026#34;inndelingskriterium\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;inndelingskriterium på norsk bokmål\u0026#34;, \u0026#34;nn\u0026#34;: \u0026#34;inndelingskriterium på norsk nynorsk\u0026#34;, \u0026#34;en\u0026#34;: \u0026#34;division criterion in english\u0026#34; }, \u0026#34;relatertBegrep\u0026#34;: \u0026#34;http://begrepskatalogen/begrep/20b2e277-9fe1-11e5-a9f8-e4115b280940\u0026#34; }, { \u0026#34;relasjon\u0026#34;: \u0026#34;generisk\u0026#34;, \u0026#34;relasjonsType\u0026#34;: \u0026#34;overordnet\u0026#34;, \u0026#34;inndelingskriterium\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;inndelingskriterium på norsk bokmål\u0026#34;, \u0026#34;nn\u0026#34;: \u0026#34;inndelingskriterium på norsk nynorsk\u0026#34;, \u0026#34;en\u0026#34;: \u0026#34;division criterion in english\u0026#34; }, \u0026#34;relatertBegrep\u0026#34;: \u0026#34;http://begrepskatalogen/begrep/20b2e277-9fe1-11e5-a9f8-e4115b280940\u0026#34; }, { \u0026#34;relasjon\u0026#34;: \u0026#34;generisk\u0026#34;, \u0026#34;relasjonsType\u0026#34;: \u0026#34;underordnet\u0026#34;, \u0026#34;inndelingskriterium\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;inndelingskriterium på norsk bokmål\u0026#34;, \u0026#34;nn\u0026#34;: \u0026#34;inndelingskriterium på norsk nynorsk\u0026#34;, \u0026#34;en\u0026#34;: \u0026#34;division criterion in english\u0026#34; }, \u0026#34;relatertBegrep\u0026#34;: \u0026#34;http://begrepskatalogen/begrep/20b2e277-9fe1-11e5-a9f8-e4115b280940\u0026#34; } ], \u0026#34;merknad\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;Tilleggsopplysninger om begrepets betydning som ikke hører hjemme i definisjonsfeltet på norsk bokmål\u0026#34;, \u0026#34;nn\u0026#34;: \u0026#34;Tilleggsopplysningar om betydninga av omgrepet som ikkje høyrer heime i definisjonsfeltet på nynorsk\u0026#34;, \u0026#34;en\u0026#34;: \u0026#34;Additional information about the term\u0026#39;s meaning that does not belong in the definition field in english \u0026#34; }, \u0026#34;eksempel\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;Eksempler på konkrete tilfeller av begrepet på norsk bokmål\u0026#34;, \u0026#34;nn\u0026#34;: \u0026#34;Døme på konkrete tilfelle av omgrepet på norsk nynorsk\u0026#34;, \u0026#34;en\u0026#34;: \u0026#34;Examples of concrete cases of the concept in english\u0026#34; }, \u0026#34;fagområdeKoder\u0026#34;: [ \u0026#34;0d56d650-2062-4567-84f6-8c3cd6b0c996\u0026#34; ], \u0026#34;fagområde\u0026#34;: { \u0026#34;nb\u0026#34;: [ \u0026#34;Spesialisert kunnskapsområde som begrepet tilhører på norsk bokmål\u0026#34; ], \u0026#34;nn\u0026#34;: [ \u0026#34;Spesialisert kunnskapsområde som omgrepet tilhøyrer på norsk nynorsk\u0026#34; ], \u0026#34;en\u0026#34;: [ \u0026#34;Specialized knowledge area to which the concept belongs in english\u0026#34; ] }, \u0026#34;omfang\u0026#34;: { \u0026#34;tekst\u0026#34;: \u0026#34;Tittel på verdiområde\u0026#34;, \u0026#34;uri\u0026#34;: \u0026#34;http://lenketilverdiomraade.no\u0026#34; }, \u0026#34;kontaktpunkt\u0026#34;: { \u0026#34;harEpost\u0026#34;: \u0026#34;e-post@epost.no\u0026#34;, \u0026#34;harTelefon\u0026#34;: \u0026#34;12345678\u0026#34; }, \u0026#34;statusURI\u0026#34;: \u0026#34;http://publications.europa.eu/resource/authority/concept-status/DRAFT\u0026#34;, \u0026#34;versjonsnr\u0026#34;: { \u0026#34;major\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;minor\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;patch\u0026#34;: \u0026#34;0\u0026#34; } } ] "},{"uri":"/developers_handbook/tools_and_software/python/","title":"Python","tags":[],"description":"","content":"Setting up Python environment Resources mentioned in this guide:\npyenv (github) poetry (homepage) nox (homepage) nox-poetry (homepage) optional: pipx (homepage) Installation and setup (macOS) Install pyenv (docs) On Mac OS X you need Homebrew and the Xcode Command Line Tools:\nxcode-select --install Then run (Pyenv suggested build environment):\nbrew install openssl readline sqlite3 xz zlib tcl-tk Run the following commands:\nbrew update brew install pyenv Add the following lines to .zshrc:\nexport PYENV_ROOT=\u0026#34;$(pyenv root)\u0026#34; eval \u0026#34;$(pyenv init -)\u0026#34; Check that installation was succesful:\npyenv --version Should print the pyenv version, i.e. pyenv 2.3.36\nTo install the remaining packages and dependencies with the pipx CLI, continue reading Alternative A. For an alternative installation without pipx skip to Alternative B.\nAlternative A: Installation with pipx pipx pipx is a CLI to install and run Python-applications in isolated environments. It is intended for globally available installations of Python CLIs, like Poetry, and not for libraries and project dependencies.\nNote: pipx installed with brew is independent from the active python-version selected with pyenv.\nInstall pipx (installation-docs) To install, run the following commands:\nbrew update brew install pipx pipx ensurepath Check that pipx is available:\npipx --version Should print something like 1.4.3.\nCheck that the line\nexport PATH=\u0026#34;$PATH:/Users/\u0026lt;username\u0026gt;/.local/bin\u0026#34; has been added to your ~/.zshrc (or equivalent config file).\nNB! Make sure that you are not in an active virtual environment (i.e. by running poetry env use ...) when running pipx commands. Otherwise pipx might install packages to the wrong virtual environment.\nInstall Poetry with pipx (installation-docs) Run:\npipx install poetry Check that poetry is available:\npoetry --version This should print something like Poetry (version 1.7.1)\nMake sure Poetry uses the currently active python version from pyenv by running:\npoetry config virtualenvs.prefer-active-python true When in a Poetry project with a pyproject.toml this should list a pyenv version of python:\npoetry env info Nox Nox is a command line tool that automates testing in multiple Python environments.\nInstall nox with pipx pipx install nox nox-poetry nox-poetry is a package which makes you able to run Poetry inside Nox sessions.\nInstall nox-poetry with pipx To install it to the same environment as Nox is run from, run:\npipx inject nox nox-poetry Alternative B: Installation without pipx Make sure you have the expected python version activated with pyenv local x.x.x, and make sure that pip is pointing to that python version.\nThis will install the packages for each python version. In other words you have to install the following packages for each python-version you install and activate with pyenv.\nInstall Poetry pip install poetry Installing a specific version\npip install poetry==1.2.0 Nox pip install nox nox-poetry pip install nox-poetry Known problems VS Code can\u0026rsquo;t find virtual environments Make sure the project virtual environments created by Poetry are found by VS Code, by adding the following option to settings.json (macOS-specific):\n\u0026#34;python.venvPath\u0026#34;: \u0026#34;~/Library/Caches/pypoetry/virtualenvs\u0026#34; poetry config virtualenvs.path gives the venv-path on your on OS.\nMissing system library: lxml Error message when running a nox session:\n.cache/contract_tests-3-8/lib/python3.8/site-packages/feedgen/feed.py:17: in \u0026lt;module\u0026gt; from lxml import etree # nosec - not using this for parsing E ImportError: dlopen(/Users/xxxx/Digdir/fdk-fulltext-search/.cache/contract_tests-3-8/lib/python3.8/site-packages/lxml/etree.cpython-38-darwin.so, 0x0002): symbol not found in flat namespace \u0026#39;_exsltDateXpathCtxtRegister\u0026#39; Install the following packages:\nbrew install libxml2 brew install libxslt We need to install an older version of lxml. Add the following line to your pyproject.toml.\nlxml = \u0026#34;4.9.2\u0026#34; Docker command not found When using podman and docker-compose it is possible you get the following error running tests:\nCommand: docker not found Link podman to docker:\nsudo ln -s /opt/podman/bin/podman /usr/local/bin/docker Podman/docker crashes Remember to have setup enough resoures for your Podman machine.\nUseful commands pyenv Install a specific Python version\npyenv install 3.11 Set the local python version for the current folder/project\npyenv local 3.11 This creates a .python-version file in the current directory.\nChange python version globally (for user)\npyenv global 3.11 This is used as the default interpreter when no local python version is activated.\n"},{"uri":"/felles-datakatalog/begrepskatalog/standarder/skos/","title":"Simple Knowledge Organization System (SKOS)","tags":[],"description":"","content":"Standard for tilgjengeliggjøring av begrep - SKOS Simple Knowledge Organization System, https://www.w3.org/TR/skos-reference/: Standarden definerer hvordan begreper representeres i maskinlesbare formater RDF: Resource Description Framework (RDF), 2014-02-25, https://www.w3.org/RDF/.\nSKOS er et lite vokabular (metamodell) for de mest sentrale klassene og egenskapene for begreper (Concept). For å bruke SKOS som representasjonsspråk i begrepsbeskrivelser må vokabularet utvides med andre vokabularer. Denne standarden supplerer SKOS med følgende vokabularer:\nDublin core terms (DCT), prefiks dct: - supplerer med generelle egenskaper knyttet til dokumentasjon Data catalog vocabulary (DCAT), prefiks dcat: - supplerer med generelle egenskaper knyttet til datasett SKOS extension for labels (SKOS-XL), prefiks skosxl: - supplerer med egenskaper knyttet til termer SKOS extension for representing statistical classifications (XKOS), prefiks xkos: - supplerer med egenskaper knyttet til relasjoner Norske SKOS-utvidelser, prefiks skosno: - det som etter bruk av ovennevnte suppleringer fortsatt mangler, vil suppleres med egne norske utvidelser til SKOS. Norske utvidelser til SKOS vil bli definert og gjort tilgjengelig senere via vokab.norge.no/skosno#.\n"},{"uri":"/felles-datakatalog/begrepskatalog/standarder/tbx/","title":"TermBase Exchange (TBX)","tags":[],"description":"","content":"Standard for tilgjengeliggjøring av begrep - TBX ISO 30042 Systems to manage terminology, knowledge and content —TermBase eXchange (TBX): Standarden definerer et rammeverk for hvordan (samlinger av) begrepsbeskrivelser skal kunne utveksles i maskinlesbare formater. Spesifikasjonen i dette kapitlet utgjør definisjonen av en TBX-dialekt, kalt TBX-AP-No. Dialektnavnet TBX-AP-No skal oppgis i en TBX-fil for å være i samsvar med denne standarden: .\nSpesifikasjonen sier ikke hva som er obligatoriske felter, men hvordan et felt skal representeres i TBX når feltet brukes. Se Forvaltningsstandard for begrepsbeskrivelser hhv. TBX for hva som er obligatorisk.\nFor referanser fra et begrep til andre begreper, har vi valgt å bruke , også i tilfeller begreper som refereres til er i samme TBX-fil. Dette fordi Forvaltningsstandard for begrepsbeskrivelser krever at ethvert begrep skal ha en URI. I tabellen under er det også tatt med PID (persistent identifier) til definisjoner av datafelter og kodeverdier. Dette for å oppnå semantisk interoperabilitet med andre TBX-dialekter, ved at man gjennom unike PIDer refererer til samme definisjoner av datafelter og kodeverdier, selv om man bruker ulike termer i ulike TBX-dialekter. Vi bruker primært PIDer som finnes fra ISO (www.isocat.org/datcat/), supplert med definisjoner/PIDer fra andre offisielle kilder (bl.a. SKOSog Dublin Core).\nDer det p.t. ikke finnes ferdige internasjonale definisjoner, er PID oppgitt med prefiks “skosno:”. Disse vil bli definert og publisert senere under vokab.norge.no/skosno#. PIDer er ikke nødvendig å oppgi i en TBX-fil, men brukes til å slå opp i definisjoner når man implementerer eller tolker en TBX-fil som er i samsvar med denne standarden.\n"},{"uri":"/developers_handbook/testing/","title":"Testing","tags":[],"description":"","content":"On testing microservices and how we do it.\nFrom Clemson \u0026ldquo;Testing Strategies in a Microservice Architecture\u0026rdquo; we have borrowed the following strategies:\nunit integration component contract end-to-end From Clemson \u0026ldquo;Testing Strategies in a Microservice Architecture\u0026rdquo; we have borrowed the following strategies:\nunit (solitary + sociable) automated, included in coverage integration (testing adapters, classes that communicates with the outside world) automated, included in coverage contract (based on specification, \u0026ldquo;service test\u0026rdquo;, the artifact that will be deployed) automated end-to-end (minimal) mostly manual next step\nAs an alternative to end-to-end tests we prefer a technique called semantic monitoring, where we use fake events (synthetic transactions) to ensure that the system is behaving semantically.\nAnother aspect of testing is timing, when to run what tests: References https://martinfowler.com/articles/microservice-testing/ https://samnewman.io/books/building_microservices/ https://martinfowler.com/bliki/SyntheticMonitoring.html "},{"uri":"/felles-datakatalog/begrepskatalog/","title":"Begrepskatalog","tags":[],"description":"","content":"Felles begrepskatalog ble utviklet i 2018 som en utvidelse av Felles datakatalog for å skape en oversikt over dataenes betydning. Det er ikke en forutsetning at begrepene i Felles begrepskatalog er koblet til datasett, men denne koblingen skal gjøres der det er hensiktsmessig. Med dette åpner vi også for at begrepslister som ikke har et motsvar i datasett kan publiseres i Felles begrepskatalog.\nHvor hentes begreps-beskrivelser fra? FDK høster beskrivelser fra andre begrepskataloger. I tillegg tilbys en registreringsløsning.\nHvordan registerer jeg mine begrep? Felles datasettkatalog inneholder en registreringsløsning som alle offentlige virksomheter kan benytte. Private virksomheter oppfordres til å ta kontakt for å registrere sine begreper.\nHvordan importerer jeg mine begreper direkte inn i publiseringsløsningen? Se brukerveiledning her\nHvor finner jeg felles begrepskatalog? Her finner du Begrepskatalogen: https://data.norge.no/concepts\n"},{"uri":"/developers_handbook/git_workflow/","title":"Git workflow","tags":[],"description":"","content":"There are different popular Git workflows. We consider Gitflow too focused on scheduled releases. Since we try to deploy \u0026ldquo;all the time\u0026rdquo;, we shall adhere to the GitHub Flow:\nAnything in the master branch is deployable To work on something new, create a descriptively named branch off of master (ie: new-oauth2-scopes) Commit to that branch locally and regularly push your work to the same named branch on the server When you need feedback or help, or you think the branch is ready for merging, open a pull request After someone else has reviewed and signed off on the feature, you can merge it into master Once it is merged and pushed to \u0026lsquo;master\u0026rsquo;, you can and should deploy immediately Tips and tricks Nice introductction to GitHub flow here: https://docs.github.com/en/get-started/quickstart/github-flow "},{"uri":"/developers_handbook/tools_and_software/rust/","title":"Rust","tags":[],"description":"","content":"\nTo install Rust, refer to the Installing Rust section within the Getting Started page. The Rust Book is a great place to start learning Rust. "},{"uri":"/developers_handbook/code_quality/","title":"Code quality","tags":[],"description":"","content":"We use SonarCloud to monitor code quality, including test coverage.\nFirst and foremost code quality analysis is a tool for code review. In the following pages you will find a brief discussion on what we consider important aspects of quality when doing a review.\n"},{"uri":"/developers_handbook/tools_and_software/go/","title":"Go","tags":[],"description":"","content":"\nTo install Go, refer to the Download and install section within the Go User Manual. The Getting started section is a great place to start learning Go. "},{"uri":"/felles-datakatalog/informasjonsmodell-katalog/","title":"Informasjonsmodell-katalog","tags":[],"description":"","content":"Felles informasjonsmodell-katalog er en utvidelse av Felles datakatalog for å skape en oversikt over informasjonsmodeller. I katalogen finner man også hvilke API\u0026rsquo;er informasjonsmodellene tilhører.\nHvor hentes informasjonsmodellene fra? I dag hentes informasjonsmodellen fra spesifikasjonen til APIer i API-katalogen. Spesifikt hentes modellene uta av spesifikasjonens Schema Object. I tillegg høster FDK fra andre informasjonsmodell-kataloger.\nHvordan registerer jeg mine informasjonsmodeller? Foreløpig har vi ingen løsning for å registrere informasjonsmodeller i vår løsning.\nHvor finner jeg felles informasjonsmodell-katalog? Her finner du Informasjonsmodell-katalogen: https://data.norge.no/informationmodels\n"},{"uri":"/felles-datakatalog/metadatakvalitet/","title":"Metadatakvalitet","tags":[],"description":"","content":" d a t a s e t K - a e f v k d e a a n t t a - s p e u t b - l e i v s e h n a e t s r s s m e n t a m t R q o a a r b - b h d i a a t r t M v a Q e s s e t t P s - o e s v t e g n r t e s s d a p t r a o u s p r e e l s t r - c - t c o h y h r a - e i r c c n v h k g e e e - s c r a t k p e e i r r m q a - s e c v o e r n i t n s g - s e r v i c e dataset-event-publisher lytter etter RabbitMQ harvest meldinger fra dataset-harvester. Den henter så datasett-grafer via apiet til dataset-harvester, og produserer én event på dataset-events topicen for hvert datasett dataset-harvester har oppdatert. assmentator konsumerer hver høstet graf fra dataset-events, legger til hasAssessment properties på både dataset- og hver distribution-node, og produserer videre til mqa-dataset-events. property-checker og url-checker konsumerer begge datasett grafer fra mqa-dataset-events og produserer assessment grafer til mqa-events. Disse assessment grafene konsumeres av scoring-service, og sammenslås basert på fdk_id og event timestamp. scoring-service lagrer/oppdaterer assessment grafer i Postgres via scoring-api, samt totalscore for hver dimensjon for å kunne gjøre raske aggregerte spørringer.\n"},{"uri":"/developers_handbook/monitoring/","title":"Monitoring","tags":[],"description":"","content":"Monitoring is critical to a microservice architecture. In the following pages we describe how we instrument our services in order to be properly monitored.\nWe use Prometheus and Grafana to monitor our services. They are configured and deployed from the fdk-infra repo. The Grafana dashboards themselves are located in fdk-grafana-dashboards.\n"},{"uri":"/developers_handbook/operations_and_status_codes/","title":"Operations and status codes","tags":[],"description":"","content":"The following is guidelines prescribing what HTTP method to use for common \u0026ldquo;business functions\u0026rdquo; and what status codes to return for the happy case. If a header is to be returned, an example is given.\nFunction HTTP Method Status Code Header Comment List GET /foos/ 200 OK Collection in response. 200 Ok even if empty collection Create POST /foos/ 201 Created Location: /foos/1234 No body in response Get GET /foos/1234 200 OK Update PUT /foos/1234 204 No Content No body in response Update (patch) PATCH /foos/1234 200 OK The updated resource in response body Delete DELETE /foos/1234 204 No Content No body in response References Method definitions Status Code Definitions\nJSON Patch\n"},{"uri":"/felles-datakatalog/tjeneste-og-hendelseskatalog/","title":"Tjeneste- og hendelseskatalog","tags":[],"description":"","content":"Felles Tjeneste- og hendelseskatalog er en utvidelse av Felles datakatalog for å skape en oversikt over tjenester og hendelser i Norge.\nHvor hentes tjeneste- og hendelsesbeskrivelser fra? FDK høster beskrivelser fra tjeneste- og hendelseskataloger hos virksomhetene. I tillegg tilbys en registreringsløsning for tjenester.\nHvordan registrere jeg mitt høsteendepunkt slik at mine tjenester og hendelser blir høstet til FDK? Se brukerveiledning her\nHvordan registerer jeg mine tjenester? Felles datasettkatalog inneholder en registreringsløsning som alle offentlige virksomheter kan benytte. Private virksomheter oppfordres til å ta kontakt for å registrere sine tjenester.\nHvor finner jeg felles Tjeneste og hendelseskatalog? Her finner du Tjeneste- og hendelseskatalogen: https://data.norge.no/public-services-and-events\n"},{"uri":"/felles-datakatalog/s%C3%B8k_og_filter/","title":"Søk og filter","tags":[],"description":"","content":"Det følgende er både en forklaring og en spesifikasjon på hvordan søke- og filtreringsfunksjonaliteten fungerer i datakatalogen.\nSøk TBD: Kort beskrivelse av søket\nFilter TBD: Kort beskrivelse av filter\n"},{"uri":"/developers_handbook/tools_and_software/","title":"Tools and software","tags":[],"description":"","content":"The following is what is intended as useful hints and howtos when you set up your computer for working with our projects. The following tips are in no way requirements, but should help you to get started painlessly.\n"},{"uri":"/felles-datakatalog/harvesting/","title":"Harvesting","tags":[],"description":"","content":"\nThe harvest solution consists of 3 parts:\nHarvest - The resources are downloaded from several sources, split into single resource-graphs and given an id Reason - Each resource graph is enriched with relevant data Parse - Each resource graph is converted to JSON The finished JSON-representation of each resource is then picked up by both the backend for the search page, fdk-search-service, and the backend for the details page, fdk-resource-service. Changes in the resources are available in data.norge when these two services have been updated.\nThe harvest process can be initiated by two services:\nHarvest scheduler - Initiates harvest of all sources from predefined schedules. Harvest admin - This is where sources are registered for harvest, each source has a button to initiate harvest of that specific source. The communication between the relevant services is handled by a combination of RabbitMQ and Apache Kafka. The harvests are triggered by messages published in RabbitMQ, and the harvesters will publish harvest reports for each source in RabbitMQ when they are done. These reports contain information about each resource with changes and each resource that has been removed from the source since the last harvest. These reports are picked up by different versions of fdk-kafka-event-publisher, and will produce events in Kafka for each changed resource. Reasoning consumes events about changed resources and produces new events with the enriched graphs. Parsing consumes events about reasoned resources and produces new events with a JSON version of the resource. The events about parsed resources are consumed by fdk-search-service and fdk-resource-service and the harvest process is finished.\nParts of FDK not strictly part of the harvest process that are also dependent of the kafka events produced by the process:\nfdk-sparql-service That listens for reasoned and removed messages to maintain updated graphs available for sparql queries MQA That listens for DATASET_HARVESTED to produce an assessment of the harvested datasets Detailed schema of the harvest process "},{"uri":"/developers_handbook/tools_and_software/kafka/","title":"Kafka","tags":[],"description":"","content":"Read messages from Kafka Number of partitions and their message count Substitute dataset-events with the desired topic.\nkubectl exec -it kafka-1-0 -- /bin/kafka-run-class kafka.tools.GetOffsetShell --broker-list localhost:9092 --topic dataset-events You may omit --topic to list all topics, but should then ignore __consumer and _schemas.\nkubectl exec -it kafka-1-0 -- /bin/kafka-run-class kafka.tools.GetOffsetShell --broker-list localhost:9092 | grep -v __consumer | grep -v _schemas Example output dataset-events:0:47472 dataset-events:1:49949 dataset-events:2:49361 dataset-events:3:50122 Read last n messages from partition in topic Substitute topic, partition and offset parameters based on output from command above. Remember that all messages with the same key (often some sort of ID) is put on the same partition.\nkubectl exec -it schema-registry-1-0 -- kafka-avro-console-consumer --bootstrap-server kafka-1:9092 --property schema.registry.url=http://localhost:8081 --topic dataset-events --partition 0 --offset 47470 You may redirect the command output to a file and then use jq to get a more readable output.\n# Pipe output into file \u0026#39;kafka-output\u0026#39; while also seeing output in terminal kubectl exec ... | tee kafka-output # Show whole messages cat kafka-output | grep \u0026#34;{\u0026#34; | jq # Show selected fields in messages cat kafka-output | grep \u0026#34;{\u0026#34; | jq \u0026#34;{type,fdkId,timestamp}\u0026#34; "},{"uri":"/felles-datakatalog/statistikk/","title":"Statistikk","tags":[],"description":"","content":" Oktober 2018 April 2019 Mai 2019 Juni 2019 Juli 2019 August 2019 September 2019 Oktober 2019 November 2019 "},{"uri":"/_header/","title":"","tags":[],"description":"","content":"\n"},{"uri":"/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"/","title":"Data.norge.no dokumentasjon","tags":[],"description":"","content":"Data.norge.no dokumentasjon Her finner du informasjon og dokumentasjon om Data.norge.no.\nHvis du finner noe som er feil i vår dokumentasjon, eller som ikke er beskrevet godt nok på disse sidene:\nsend en epost til fellesdatakatalog@digdir.no, opprett en sak i Github Informasjonsforvaltning/docs, eller lag en pull request i Github Informasjonsforvaltning/docs. Hvis du har funnet feil eller mangler på Data.norge.no:\nsend en e-post til fellesdatakatalog@digdir.no opprett en sak direkte i Github Informasjonsforvaltning/fdk-issue-tracker. "},{"uri":"/tags/","title":"Tags","tags":[],"description":"","content":""}]